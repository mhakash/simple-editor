{"version":3,"sources":["components/editor.js","App.js","serviceWorker.js","index.js","components/coderunner.js"],"names":["Editor","initialCode","useState","code","setCode","output","setOutput","useEffect","codeRunner","className","style","color","fontSize","value","options","mode","theme","tabSize","scrollbarStyle","onBeforeChange","editor","data","marginTop","App","width","marginLeft","borderRadius","boxShadow","padding","background","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","systemErr","systemLog","log","msgs","text","forEach","e","String","eval","err"],"mappings":"iQAgDeA,EAxCA,SAAC,GAA0B,IAAD,IAAvBC,mBAAuB,MAAT,GAAS,IACfC,mBAASD,GADM,mBAChCE,EADgC,KAC1BC,EAD0B,OAEXF,mBAAS,IAFE,mBAEhCG,EAFgC,KAExBC,EAFwB,KAIvCC,qBAAU,WACRD,EAAa,KAAJ,OAAWE,YAAWL,OAC9B,CAACA,IAkBJ,OACE,yBAAKM,UAAU,UACb,yBAAKC,MAAO,CAAEC,MAAO,OAAQC,SAAU,KAAvC,qBACA,6BACA,kBAAC,aAAD,CACEC,MAAOV,EACPW,QAtBU,CACdC,KAAM,aACNC,MAAO,OACPC,QAAS,EACTC,eAAgB,MAmBZC,eAjBqB,SAACC,EAAQC,EAAMR,GACxCT,EAAQS,MAiBH,IAPL,IAQ6C,6BAC3C,yBAAKH,MAAO,CAAEC,MAAO,OAAQC,SAAU,KAAvC,oBACA,yBAAKF,MAAO,CAAEY,UAAW,SAAzB,IAAqCjB,EAArC,KAAoD,MCpB3CkB,MApBf,WACE,OACE,yBAAKb,MAAO,CACVc,MAAO,QACPZ,SAAU,OACVa,WAAW,QACXH,UAAW,OACXI,aAAc,MACdC,UAAW,gCACXC,QAAS,sBACTC,WAAY,SAEZ,yBAAKnB,MAAO,IACV,kBAAC,EAAD,CAAQT,YAAW,0BAEd,MCNO6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,wEEzI5B,IAAMzC,WAAa,SAAbA,aAAiC,IAAVL,KAAS,uDAAJ,GAC1B+C,UAAYF,QAAQD,MACpBI,UAAYH,QAAQI,IACtBC,KAAO,GACXL,QAAQI,IAAM,WAAmB,IAAD,uBAANE,EAAM,yBAANA,EAAM,gBAC9BA,EAAKC,SAAQ,SAAAC,GAAC,OAAIH,KAAOA,KAAM,KAAOI,OAAOD,OAE/CR,QAAQD,MAAQ,WAAmB,IAAD,uBAANO,EAAM,yBAANA,EAAM,gBAChCA,EAAKC,SAAQ,SAAAC,GAAC,OAAIH,MAAcI,OAAOD,OAEzC,IAEEE,KAAKvD,MAEP,MAAMwD,KACJN,MAAQI,OAAO,KAAME,KAIvB,OAFAX,QAAQI,IAAMD,UACdH,QAAQD,MAAQG,UACTG,MAGM7C,kC","file":"static/js/main.929f2391.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/idea.css\";\nimport \"./editor.css\";\nimport codeRunner from \"./coderunner\";\n\nconst Editor = ({ initialCode = \"\" }) => {\n  const [code, setCode] = useState(initialCode);\n  const [output, setOutput] = useState(\"\");\n\n  useEffect(() => {\n    setOutput(`${\"\\n\"}${codeRunner(code)}`);\n  }, [code]);\n\n  const options = {\n    mode: \"javascript\",\n    theme: \"idea\",\n    tabSize: 2,\n    scrollbarStyle: null,\n  };\n  const handleBeforeChange = (editor, data, value) => {\n    setCode(value);\n  };\n  // const run = () => {\n  //   setOutput(`${codeRunner(code)}`);\n  //   console.log(\"hello\");\n  // };\n  // const handleChange = () => {\n  //   setOutput(`${\"\\n\"}${codeRunner(code)}`);\n  // };\n  return (\n    <div className=\"editor\">\n      <div style={{ color: \"#666\", fontSize: 20 }}>Javascript Editor</div>\n      <hr />\n      <CodeMirror\n        value={code}\n        options={options}\n        onBeforeChange={handleBeforeChange}\n      />{\" \"}\n      {/* <button onClick={run}>run</button> */} <hr />\n      <div style={{ color: \"#666\", fontSize: 15 }}>console output :</div>\n      <div style={{ marginTop: \"20px\" }}> {output} </div>{\" \"}\n    </div>\n  );\n};\n\nexport default Editor;\n","import React from \"react\";\nimport Editor from \"./components/editor\";\n\nfunction App() {\n  return (\n    <div style={{\n      width: \"500px\",\n      fontSize: \"16px\",\n      marginLeft:'100px',\n      marginTop: '50px',\n      borderRadius: '3px',\n      boxShadow: '0px 2px 2px 0 rgba(0,0,0,0.2)',\n      padding: '10px 20px 20px 20px',\n      background: '#fff'\n    }}>\n      <div style={{}}>\n        <Editor initialCode={`console.log('hello')`} />\n        \n      </div>{\" \"}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const codeRunner = function (code='') {\n  const systemErr = console.error\n  const systemLog = console.log\n  let msgs = ''\n  console.log = function(...text) {\n    text.forEach(e => msgs = msgs +'\\n' + String(e))\n  }\n  console.error = function(...text) {\n    text.forEach(e => msgs = msgs + String(e))\n  }\n  try{\n    // eslint-disable-next-line no-eval\n    eval(code)\n  }\n  catch(err){\n    msgs += String('\\n'+ err)\n  }\n  console.log = systemLog\n  console.error = systemErr\n  return msgs\n}\n\nexport default codeRunner"],"sourceRoot":""}